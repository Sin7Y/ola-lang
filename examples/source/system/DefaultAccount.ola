// For DefaultAccount, all the methods should only be called by Entrypoint system contract.
// Although user's AA implemenation does not have this restriction.

contract DefaultAccount {

    struct Transaction {
        address from;
        address to;
        fields data; // CR: fields data;
        fields codes; // CR: fields codes;
            }

// Public key for the default AA.
    fields pubkey;

    fn onlyEntrypointCall() {
        address ENTRY_POINT_ADDRESS = address(0x8001);
        assert(caller_address() == ENTRY_POINT_ADDRESS, "Only Entrypoint system contract can call this function.");
    }

    fn ignoreDelegateCall() {
        assert(current_address() == code_address(), "Delegatecall is not allowed.");
    }

    fn setPubkey(fields _pk) {
        assert(_pk.length == 8, "Public key must be a 8 fields value.");
        assert(pubkey.length == 0, "Public key has already been set.");

        hash addr = poseidon_hash(_pk);
        assert(caller_address() == address(addr), "Public key and address do not match.");
        pubkey = _pk;
    }

    fn validateTransaction(hash _txHash, hash _signedHash, Transaction _tx) -> (u32) {
        onlyEntrypointCall();
        ignoreDelegateCall();

        // TODO: selector is not supported right now.
        // return DefaultAccount.validateTransaction.selector;
        // we use hash to represent this for now. hash has 8 u32.
        u32 magic = get_selector("validateTransaction(hash,hash,Transaction)");
        
        if (pubkey.length == 0) {
            u32 len = _tx.data.length;
            u32 selector = abi.decode(_tx.data[len - 1:len], (u32));
            u32 expected = get_selector("setPubkey(fields)");
            if (selector == expected) {
                return magic;
            }
        } else {
            // The caller already set public key, just do the normal validation.
            assert(signature().length == 8, "Signature of ECDSA should be 8 fields.");
            if (check_ecdsa(_signedHash, pubkey, signature())) {
                return magic;
            }
        }
        return 0;
    }

    fn executeTransaction(address _to, fields _data) -> (fields){
        onlyEntrypointCall();
        ignoreDelegateCall();

        fields res = _to.call(_data);
        return res;
    } 

    fn payForTransaction(hash _txHash, hash _signedHash, Transaction _tx) {
    onlyEntrypointCall();
    ignoreDelegateCall();

    // TODO: handle gas payment
    }

    fn prepareForPaymaster(hash _txHash, hash _signedHash, Transaction _tx) {
    onlyEntrypointCall();
    ignoreDelegateCall();

    // TODO: handle allowance and approval for user and paymaster
    }
}