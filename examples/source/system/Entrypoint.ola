// TODO: import is not supported right now.
// TODO: multiple contract in one file is not supported right now.

contract Entrypoint {
    // TODO: we only support one contract deployment in one transaction.

    // TODO: disable this for version 0.
    // TODO: the predefined constant is not supported yet.
    // system address range [0, 2^16-1]
    // address MAX_SYSTEM_CONTRACT_ADDRESS = address(0xffff);
    // address KNOWN_CODES_STORAGE = address(0x8004);
    // address NONCE_HOLDER_ADDRESS = address(0x8003);
    // address DEPLOYER_SYSTEM_CONTRACT = address(0x8005);

    struct Transaction {
        address from;
        address to;
        fields data; // CR: fields data;
        fields codes; // CR: fields codes;
    }

    // CR: callTransaction.
    fn system_entrance(Transaction _tx, bool _isETHCall) {
        validateTxStructure(_tx);

        if (_isETHCall) {
            callTx(_tx); // Catch return data
        } else {
            sendTx(_tx);
        }
    }

    fn validateTxStructure(Transaction _tx) {
        // Check from's address isn't in system address range [0, 2^16-1]
        // TODO: this gt is not working right now.
        address MAX_SYSTEM_CONTRACT_ADDRESS = address(0xffff);
        assert(_tx.from > MAX_SYSTEM_CONTRACT_ADDRESS, "from can't be system contract");

        // Check to address can't be empty
        assert(_tx.to != address(0x00), "to can't be empty");

        // Check chainid equal
        // TODO: We need set constant chainid in the system contract.
        // assert(_tx.chainid == chain_id(), "chainid is not equal");

        // Check transaction version

        // Check data in transaction should not be empty
        assert(_tx.data.length != 0, "data shouldn't be empty");

        // Check signature in transaction should not be empty
        fields signature = signature();
        assert(signature.length != 0, "signature shouldn't be empty");
    }

    fn callTx(Transaction _tx) -> (fields) {
        print(_tx);
        // The layout of data field in transaction should be:
        // | function selector | arguments ... |
        // | --    1 u32   --  | --  N u32  -- |

        // TODO: get slice from array is not supported right now.
        fields res = _tx.to.call(_tx.data);
        return res;
    }

    fn sendTx(Transaction _tx) {
        print(_tx);
        validateTx(_tx);

        // check if codes exists
        validateDeployment(_tx);

        // call the actual function of to.
        // CR: for Deployment
        _tx.to.call(_tx.data);

        // Update the nonce
        address NONCE_HOLDER_ADDRESS = address(0x8003);
        fields set_nonce_calldata = abi.encodeWithSignature("setNonce(address,u32)", _tx.from, nonce());
        NONCE_HOLDER_ADDRESS.call(set_nonce_calldata);
    }

    fn validateTx(Transaction _tx) {
        // Compute the hash of the transaction
        hash signedHash = getSignedHash(_tx);
        hash txHash = getTransactionHash(signedHash, signature());

        // Check from is EOA(default account) or contract
        validate_from(_tx.from);

        // Check the nonce is valid
        validate_nonce(_tx.from, nonce());

        // Validate transaction signature
        validate_tx(txHash, signedHash, _tx);
    }

    fn validateDeployment(Transaction _tx) {
        // check if codes exists
        u32 code_len = _tx.codes.length;
        if (code_len != 0) {
            // First check if hash and bytecode matches.
            hash bytecodeHash = hashL2Bytecode(_tx.codes);
            hash codeHash = abi.decode(_tx.data[8:12], (hash));
            assert(bytecodeHash == codeHash, "bytecode hash is not same as expected");

            // Check if bytecode is already deployed contracts
            address KNOWN_CODES_STORAGE = address(0x8004);
            fields is_codehash_known_calldata = abi.encodeWithSignature("isCodehashKnown(hash)", bytecodeHash);
            fields is_codehash_known_bytes = KNOWN_CODES_STORAGE.call(is_codehash_known_calldata);
            bool is_codehash_known = abi.decode(is_codehash_known_bytes, (bool));

            // Mark codehash as known if it is unknown
            if (!is_codehash_known) {
                fields mark_codehash_known = abi.encodeWithSignature("markCodehashKnown(hash)", bytecodeHash);
                KNOWN_CODES_STORAGE.call(mark_codehash_known);
            }
            // CR: constrain to == DEPLOYER
            address DEPLOYER_SYSTEM_CONTRACT = address(0x8005);
            assert(_tx.to == DEPLOYER_SYSTEM_CONTRACT, "destination must be contract deployer account");
        }
    }

    // Compute the signed hash and transaction hash for a transaction
    // CR: split two return into 1 return.
    // CR: string encode
    // CR: dynamic length input of hash.
    fn getSignedHash(Transaction _tx) -> (hash) {
        // TODO: hash is not working right now.
        // TODO: hash string is not supported.
        // Compute the personal magic of struct, this can be const(meaning we can do the hash offline and hardcode the magic value)
        // hash TRANSACTION_TYPE_HASH = poseidon_hash("Transaction(address from, u32 nonce, fields data, u32 chainid, u32 version, fields codes, fields signature)");
        // MOCK_TEST: cc6d8618e74a58d1, 0bc19b503c8f6d8e, 160e900745985a7d, 52c36b8cb2846edc

        // Compute the struct hash
        // fields encodedStruct = abi.encode(TRANSACTION_TYPE_HASH, _tx.from, nonce(), tx_version(), chain_id(), poseidon_hash(_tx.data), poseidon_hash(_tx.codes));
        // // MOCK_TEST: [cc6d8618e74a58d1, 0bc19b503c8f6d8e, 160e900745985a7d, 52c36b8cb2846edc, 8,8,8,8, 1, 1, 2, 5f9c6727994b89b2, 57cfa252667fbbc2, 20b48f89e1f704a0, 5f43a95b8a97ccfd, 0,0,0,0]
        // hash structHash = poseidon_hash(encodedStruct);
        // // Compute the personal magic of EIP712, again, this can be const
        // hash EIP712_DOMAIN_TYPEHASH = poseidon_hash("EIP712Domain(string name,string version,u32 chainId)");
        // // Compute the domain separator, used in EIP712 context
        // hash domainSeparator = poseidon_hash(abi.encode(EIP712_DOMAIN_TYPEHASH, poseidon_hash("Ola"), poseidon_hash("1"), chain_id()));
        // Compute the signed hash
        // hash signedHash = poseidon_hash(abi.encode("\x19\x01", domainSeparator, structHash));
        fields encodedStruct = abi.encode(chain_id(), tx_version(), nonce(), _tx.from, _tx.to, _tx.data);
        hash signedHash = poseidon_hash(encodedStruct);
        return signedHash;
    }

    fn getTransactionHash(hash _signedHash, fields signature) -> (hash) {
        hash txHash = poseidon_hash(fields_concat(_signedHash, poseidon_hash(signature)));
        return txHash;
    }

    fn validate_from(address _address) {
        address DEPLOYER_SYSTEM_CONTRACT = address(0x8005);
        fields account_version_calldata = abi.encodeWithSignature("extendedAccountVersion(address)", _address);
        fields account_version_bytes = DEPLOYER_SYSTEM_CONTRACT.call(account_version_calldata);
        u32 account_version = abi.decode(account_version_bytes, (u32));
        assert(account_version != 0, "from is not an account.");
    }

    fn validate_nonce(address _address, u32 _nonce) {
        address NONCE_HOLDER_ADDRESS = address(0x8003);
        fields nonce_calldata = abi.encodeWithSignature("getNonce(address)", _address);
        fields nonce_bytes = NONCE_HOLDER_ADDRESS.call(nonce_calldata);
        u32 nonce = abi.decode(nonce_bytes, (u32));
        assert(_nonce == nonce + 1, "nonce is already used");
    }

    fn validate_tx(hash _txHash, hash _signedHash, Transaction _tx) {
        // CR: struct encode is not supported.
        // CR: Default Account for EOA?
        fields validate_tx_calldata = abi.encodeWithSignature("validateTransaction(hash,hash,Transaction)", _txHash, _signedHash, _tx);
        fields validate_tx_bytes = _tx.from.call(validate_tx_calldata);
        u32 magic = abi.decode(validate_tx_bytes, (u32));

        // CR: constant magic.
        u32 expected_magic = get_selector("validateTransaction(hash,hash,Transaction)");
        assert(magic == expected_magic, "Validate transaction failed.");
    }

    fn hashL2Bytecode(fields _bytecode) -> (hash) {
        hash hash_bytecode = poseidon_hash(_bytecode);
        return hash_bytecode;
    }
}