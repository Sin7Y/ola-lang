contract Voting {
 
    struct Proposal {
        string name;  
        u32 voteCount;
    }

    address chairperson;

    struct Voter {
        bool voted;  
        u32 vote;   
    }

    mapping(address => Voter) voters;

    Proposal[] proposals;

    fn contract_init(string[] proposalNames_) {
        chairperson = caller_address();
        for (u32 i = 0; i < proposalNames_.length; i++) {
            proposals.push(Proposal({
                name: proposalNames_[i],
                voteCount: 0
            }));
        }
    }

    fn vote_proposal(u32 proposal_)  {
        address msgSender = caller_address();
        Voter storage sender = voters[msgSender];
        sender.voted = true;
        sender.vote = proposal_;

        proposals[proposal_].voteCount += 1;
    }

    fn winningProposal() -> (u32 winningProposal_) {
        u32 winningVoteCount = 0;
        for (u32 p = 0; p < proposals.length; p++) {
            if (proposals[p].voteCount > winningVoteCount) {
                winningVoteCount = proposals[p].voteCount;
                winningProposal_ = p;
            }
        }
        return winningProposal_;
    }

    fn getWinnerName() -> (string) {
         string winnerName = proposals[winningProposal()].name;
         return winnerName;
    }

    fn vote_test(){

        string[] proposalNames = new string[](3);
        proposalNames[0] = "Proposal_1";
        proposalNames[1] = "Proposal_2";
        proposalNames[2] = "Proposal_3";
        for (u32 i = 0; i < proposalNames.length; i++) {
            proposals.push(Proposal({
                name: proposalNames[i],
                voteCount: i
            }));
        }
        assert(proposals[0].name ==  "Proposal_1");
    }
}


