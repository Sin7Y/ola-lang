strict digraph "/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola" {
	contract [label="contract KnownCodesStorage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:1:1-20:2"]
	var [label="variable knownHashes\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:2:5-38"]
	onlyEntrypointCall [label="onlyEntrypointCall\ncontract: KnownCodesStorage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:4:5-28\nsignature onlyEntrypointCall()"]
	var_decl [label="variable decl address ENTRY_POINT_ADDRESS\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:5:9-54"]
	address_literal [label="address literal: 0000000000000000000000000000000000000000000000000000000000008001\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:5:39-54"]
	expr [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:9-115"]
	libfunc [label="libfunc Assert\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:9-15"]
	equal [label="equal\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:16-55"]
	libfunc_9 [label="libfunc CallerAddress\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:16-30"]
	variable [label="variable: ENTRY_POINT_ADDRESS\naddress\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:36-55"]
	alloc_array [label="alloc array string\ninitializer: [79, 110, 108, 121, 32, 69, 110, 116, 114, 121, 112, 111, 105, 110, 116, 32, 115, 121, 115, 116, 101, 109, 32, 99, 111, 110, 116, 114, 97, 99, 116, 32, 99, 97, 110, 32, 99, 97, 108, 108, 32, 116, 104, 105, 115, 32, 102, 117, 110, 99, 116, 105, 111, 110, 46]\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:57-114"]
	number_literal [label="u32 literal: 55\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:6:57-114"]
	isCodehashKnown [label="isCodehashKnown\ncontract: KnownCodesStorage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:9:5-45\nsignature isCodehashKnown(hash)"]
	parameters [label="parameters\nhash _hash"]
	returns [label="returns\nbool "]
	return [label="return\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:10:9-34"]
	storage_load [label="storage load bool\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:10:9-34"]
	subscript [label="subscript mapping(hash => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:10:16-34"]
	storage_var [label="storage variable\nKnownCodesStorage.knownHashes\nmapping(hash => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:10:16-27"]
	variable_20 [label="variable: _hash\nhash\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:10:28-33"]
	markCodehashKnown [label="markCodehashKnown\ncontract: KnownCodesStorage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:13:5-37\nsignature markCodehashKnown(hash)"]
	parameters_22 [label="parameters\nhash _hash"]
	expr_23 [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:14:9-29"]
	call_internal_function [label="call internal function\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:14:9-29"]
	internal_function [label="fn()  returns (void)\nKnownCodesStorage.onlyEntrypointCall\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:14:9-29"]
	expr_26 [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:9-34"]
	assign [label="assign\nbool storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:9-34"]
	subscript_28 [label="subscript mapping(hash => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:9-27"]
	storage_var_29 [label="storage variable\nKnownCodesStorage.knownHashes\nmapping(hash => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:9-20"]
	variable_30 [label="variable: _hash\nhash\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:21-26"]
	bool_literal [label="bool literal: true\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:16:30-34"]
	diagnostic [label="found KnownCodesStorage \nlevel Debug\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/system/KnownCodesStorage.ola:1:1-20:2"]
	contracts -> contract
	contract -> var [label="variable"]
	contract -> onlyEntrypointCall [label="fn"]
	onlyEntrypointCall -> var_decl [label="body"]
	var_decl -> address_literal [label="init"]
	var_decl -> expr [label="next"]
	expr -> libfunc [label="expr"]
	libfunc -> equal [label="arg #0"]
	equal -> libfunc_9 [label="left"]
	equal -> variable [label="right"]
	libfunc -> alloc_array [label="arg #1"]
	alloc_array -> number_literal [label="length"]
	contract -> isCodehashKnown [label="fn"]
	isCodehashKnown -> parameters [label="parameters"]
	isCodehashKnown -> returns [label="returns"]
	isCodehashKnown -> return [label="body"]
	return -> storage_load [label="expr"]
	storage_load -> subscript [label="expr"]
	subscript -> storage_var [label="array"]
	subscript -> variable_20 [label="index"]
	contract -> markCodehashKnown [label="fn"]
	markCodehashKnown -> parameters_22 [label="parameters"]
	markCodehashKnown -> expr_23 [label="body"]
	expr_23 -> call_internal_function [label="expr"]
	call_internal_function -> internal_function [label="function"]
	expr_23 -> expr_26 [label="next"]
	expr_26 -> assign [label="expr"]
	assign -> subscript_28 [label="left"]
	subscript_28 -> storage_var_29 [label="array"]
	subscript_28 -> variable_30 [label="index"]
	assign -> bool_literal [label="right"]
	diagnostics -> diagnostic [label="Debug"]
}
