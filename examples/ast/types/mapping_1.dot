strict digraph "/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola" {
	contract [label="contract NonceHolder\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:1:1-10:2"]
	var [label="variable nonces\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:3:5-52"]
	setNonce [label="setNonce\ncontract: NonceHolder\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:5:5-46\nsignature setNonce(address,u32)"]
	parameters [label="parameters\naddress _address\nu32 _nonce"]
	expr [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:9-64"]
	libfunc [label="libfunc Assert\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:9-15"]
	not [label="not\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:16-41"]
	storage_load [label="storage load bool\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:16-41"]
	subscript [label="subscript mapping(u32 => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:17-41"]
	subscript_10 [label="subscript mapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:17-33"]
	storage_var [label="storage variable\nNonceHolder.nonces\nmapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:17-23"]
	variable [label="variable: _address\naddress\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:24-32"]
	variable_13 [label="variable: _nonce\nu32\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:34-40"]
	alloc_array [label="alloc array string\ninitializer: [78, 111, 110, 99, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 117, 115, 101, 100]\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:43-63"]
	number_literal [label="u32 literal: 18\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:6:43-63"]
	expr_16 [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:9-40"]
	assign [label="assign\nbool storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:9-40"]
	subscript_18 [label="subscript mapping(u32 => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:9-33"]
	subscript_19 [label="subscript mapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:9-25"]
	storage_var_20 [label="storage variable\nNonceHolder.nonces\nmapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:9-15"]
	variable_21 [label="variable: _address\naddress\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:16-24"]
	variable_22 [label="variable: _nonce\nu32\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:26-32"]
	bool_literal [label="bool literal: true\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:7:36-40"]
	expr_24 [label="expression\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:9-41"]
	libfunc_25 [label="libfunc Assert\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:9-15"]
	storage_load_26 [label="storage load bool\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:16-40"]
	subscript_27 [label="subscript mapping(u32 => bool) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:16-40"]
	subscript_28 [label="subscript mapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:16-32"]
	storage_var_29 [label="storage variable\nNonceHolder.nonces\nmapping(address => mapping(u32 => bool)) storage\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:16-22"]
	variable_30 [label="variable: _address\naddress\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:23-31"]
	variable_31 [label="variable: _nonce\nu32\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:8:33-39"]
	diagnostic [label="found NonceHolder \nlevel Debug\n/Users/yangpan/workspace/rust-workspace/ola-lang/examples/source/types/mapping_1.ola:1:1-10:2"]
	contracts -> contract
	contract -> var [label="variable"]
	contract -> setNonce [label="fn"]
	setNonce -> parameters [label="parameters"]
	setNonce -> expr [label="body"]
	expr -> libfunc [label="expr"]
	libfunc -> not [label="arg #0"]
	not -> storage_load [label="expr"]
	storage_load -> subscript [label="expr"]
	subscript -> subscript_10 [label="array"]
	subscript_10 -> storage_var [label="array"]
	subscript_10 -> variable [label="index"]
	subscript -> variable_13 [label="index"]
	libfunc -> alloc_array [label="arg #1"]
	alloc_array -> number_literal [label="length"]
	expr -> expr_16 [label="next"]
	expr_16 -> assign [label="expr"]
	assign -> subscript_18 [label="left"]
	subscript_18 -> subscript_19 [label="array"]
	subscript_19 -> storage_var_20 [label="array"]
	subscript_19 -> variable_21 [label="index"]
	subscript_18 -> variable_22 [label="index"]
	assign -> bool_literal [label="right"]
	expr_16 -> expr_24 [label="next"]
	expr_24 -> libfunc_25 [label="expr"]
	libfunc_25 -> storage_load_26 [label="arg #0"]
	storage_load_26 -> subscript_27 [label="expr"]
	subscript_27 -> subscript_28 [label="array"]
	subscript_28 -> storage_var_29 [label="array"]
	subscript_28 -> variable_30 [label="index"]
	subscript_27 -> variable_31 [label="index"]
	diagnostics -> diagnostic [label="Debug"]
}
