{
  "program": "heap_malloc:\n.LBL17_0:\n  mov r3 18446744060824649731\n  mload r0 [r3]\n  add r2 r0 r1\n  mov r1 18446744060824649731\n  mstore [r1] r2\n  ret\nvector_new:\n.LBL18_0:\n  mov r4 18446744060824649731\n  mload r0 [r4]\n  add r2 r1 1\n  add r3 r0 r2\n  mov r2 18446744060824649731\n  mstore [r2] r3\n  mstore [r0] r1\n  ret\nsplit_field:\n.LBL19_0:\n  mov r6 r1\n  mov r1 r6\n.PROPHET19_0:\n  mov r0 psp\n  mload r0 [r0]\n  mov r7 r0\n  range r7\n  mov r1 r6\n.PROPHET19_1:\n  mov r0 psp\n  mload r0 [r0]\n  mov r1 r0\n  range r1\n  mul r4 r7 4294967296\n  add r5 r4 r1\n  eq r4 r6 r5\n  assert r4\n  mstore [r2] r7\n  mstore [r3] r1\n  ret\nmemcpy:\n.LBL20_0:\n  add r9 r9 1\n  mov r4 0\n  mstore [r9,-1] r4\n  jmp .LBL20_1\n.LBL20_1:\n  mload r4 [r9,-1]\n  gte r5 r3 r4\n  neq r6 r4 r3\n  and r5 r5 r6\n  cjmp r5 .LBL20_2\n  jmp .LBL20_3\n.LBL20_2:\n  mload r6 [r1,r4]\n  mstore [r2,r4] r6\n  add r5 r4 1\n  mstore [r9,-1] r5\n  jmp .LBL20_1\n.LBL20_3:\n  add r9 r9 -1\n  ret\nmemcmp_eq:\n.LBL21_0:\n  add r9 r9 1\n  mov r4 0\n  mstore [r9,-1] r4\n  jmp .LBL21_1\n.LBL21_1:\n  mload r4 [r9,-1]\n  gte r5 r3 r4\n  neq r6 r4 r3\n  and r5 r5 r6\n  cjmp r5 .LBL21_2\n  mov r0 1\n  jmp .LBL21_3\n.LBL21_2:\n  mload r6 [r1,r4]\n  mload r7 [r2,r4]\n  add r5 r4 1\n  mstore [r9,-1] r5\n  eq r4 r6 r7\n  cjmp r4 .LBL21_1\n  mov r0 0\n  jmp .LBL21_3\n.LBL21_3:\n  add r9 r9 -1\n  ret\nmemcmp_ugt:\n.LBL22_0:\n  add r9 r9 1\n  mov r4 0\n  mstore [r9,-1] r4\n  jmp .LBL22_1\n.LBL22_1:\n  mload r4 [r9,-1]\n  gte r5 r3 r4\n  neq r6 r4 r3\n  and r5 r5 r6\n  cjmp r5 .LBL22_2\n  mov r0 1\n  jmp .LBL22_3\n.LBL22_2:\n  mload r6 [r1,r4]\n  mload r7 [r2,r4]\n  add r5 r4 1\n  mstore [r9,-1] r5\n  gte r4 r6 r7\n  neq r5 r6 r7\n  and r4 r4 r5\n  cjmp r4 .LBL22_1\n  mov r0 0\n  jmp .LBL22_3\n.LBL22_3:\n  add r9 r9 -1\n  ret\nmemcmp_uge:\n.LBL23_0:\n  add r9 r9 1\n  mov r4 0\n  mstore [r9,-1] r4\n  jmp .LBL23_1\n.LBL23_1:\n  mload r4 [r9,-1]\n  gte r5 r3 r4\n  neq r6 r4 r3\n  and r5 r5 r6\n  cjmp r5 .LBL23_2\n  mov r0 1\n  jmp .LBL23_3\n.LBL23_2:\n  mload r6 [r1,r4]\n  mload r7 [r2,r4]\n  add r5 r4 1\n  mstore [r9,-1] r5\n  gte r4 r6 r7\n  cjmp r4 .LBL23_1\n  mov r0 0\n  jmp .LBL23_3\n.LBL23_3:\n  add r9 r9 -1\n  ret\nfield_memcmp_ugt:\n.LBL24_0:\n  add r9 r9 25\n  mstore [r9,-2] r9\n  mstore [r9,-8] r1\n  mov r1 r2\n  mstore [r9,-13] r1\n  mov r1 r3\n  mstore [r9,-11] r1\n  mov r1 0\n  mstore [r9,-7] r1\n  jmp .LBL24_1\n.LBL24_1:\n  mload r1 [r9,-7]\n  mstore [r9,-12] r1\n  mload r1 [r9,-11]\n  mload r2 [r9,-12]\n  gte r1 r1 r2\n  mload r2 [r9,-11]\n  mload r3 [r9,-12]\n  neq r2 r3 r2\n  and r1 r1 r2\n  cjmp r1 .LBL24_2\n  mov r0 1\n  jmp .LBL24_4\n.LBL24_2:\n  mload r1 [r9,-8]\n  mload r2 [r9,-12]\n  mload r1 [r1,r2]\n  mload r3 [r9,-10]\n  mload r2 [r9,-15]\n  call split_field\n  mload r1 [r9,-6]\n  mstore [r9,-18] r1\n  mload r1 [r9,-5]\n  mstore [r9,-24] r1\n  mload r1 [r9,-12]\n  mload r2 [r9,-13]\n  mload r1 [r2,r1]\n  mload r3 [r9,-9]\n  mload r2 [r9,-14]\n  call split_field\n  mload r1 [r9,-4]\n  mload r2 [r9,-3]\n  mload r3 [r9,-18]\n  gte r3 r3 r1\n  mload r4 [r9,-18]\n  neq r1 r4 r1\n  and r3 r3 r1\n  cjmp r3 .LBL24_3\n  mov r0 0\n  jmp .LBL24_4\n.LBL24_3:\n  mload r3 [r9,-12]\n  add r1 r3 1\n  mstore [r9,-7] r1\n  mload r1 [r9,-24]\n  gte r1 r1 r2\n  mload r3 [r9,-24]\n  neq r2 r3 r2\n  and r1 r1 r2\n  cjmp r1 .LBL24_1\n  mov r0 0\n  jmp .LBL24_4\n.LBL24_4:\n  add r9 r9 -25\n  ret\nfield_memcmp_uge:\n.LBL25_0:\n  add r9 r9 25\n  mstore [r9,-2] r9\n  mstore [r9,-8] r1\n  mov r1 r2\n  mstore [r9,-13] r1\n  mov r1 r3\n  mstore [r9,-11] r1\n  mov r1 0\n  mstore [r9,-7] r1\n  jmp .LBL25_1\n.LBL25_1:\n  mload r1 [r9,-7]\n  mstore [r9,-12] r1\n  mload r1 [r9,-11]\n  mload r2 [r9,-12]\n  gte r1 r1 r2\n  mload r2 [r9,-11]\n  mload r3 [r9,-12]\n  neq r2 r3 r2\n  and r1 r1 r2\n  cjmp r1 .LBL25_2\n  mov r0 1\n  jmp .LBL25_4\n.LBL25_2:\n  mload r1 [r9,-8]\n  mload r2 [r9,-12]\n  mload r1 [r1,r2]\n  mload r3 [r9,-10]\n  mload r2 [r9,-15]\n  call split_field\n  mload r1 [r9,-6]\n  mstore [r9,-18] r1\n  mload r1 [r9,-5]\n  mstore [r9,-24] r1\n  mload r1 [r9,-12]\n  mload r2 [r9,-13]\n  mload r1 [r2,r1]\n  mload r3 [r9,-9]\n  mload r2 [r9,-14]\n  call split_field\n  mload r1 [r9,-4]\n  mload r2 [r9,-3]\n  mload r3 [r9,-18]\n  gte r1 r3 r1\n  cjmp r1 .LBL25_3\n  mov r0 0\n  jmp .LBL25_4\n.LBL25_3:\n  mload r3 [r9,-12]\n  add r1 r3 1\n  mstore [r9,-7] r1\n  mload r1 [r9,-24]\n  gte r1 r1 r2\n  cjmp r1 .LBL25_1\n  mov r0 0\n  jmp .LBL25_4\n.LBL25_4:\n  add r9 r9 -25\n  ret\nu32_div_mod:\n.LBL26_0:\n  add r9 r9 5\n  mstore [r9,-3] r1\n  mov r1 r2\n  mstore [r9,-4] r1\n  mload r1 [r9,-4]\n  mov r2 r1\n  mload r1 [r9,-3]\n.PROPHET26_0:\n  mov r0 psp\n  mload r0 [r0]\n  mov r1 r0\n  mstore [r9,-5] r1\n  mload r1 [r9,-5]\n  range r1\n  mload r1 [r9,-5]\n  add r5 r1 1\n  not r7 r5\n  add r7 r7 1\n  mload r1 [r9,-4]\n  add r6 r1 r7\n  range r6\n  mload r1 [r9,-4]\n  mov r2 r1\n  mload r1 [r9,-3]\n.PROPHET26_1:\n  mov r0 psp\n  mload r0 [r0]\n  mov r1 r0\n  range r3\n  mload r2 [r9,-4]\n  mul r2 r1 r2\n  mstore [r9,-1] r2\n  mload r2 [r9,-1]\n  mload r5 [r9,-5]\n  add r2 r2 r5\n  mstore [r9,-2] r2\n  mload r2 [r9,-2]\n  mload r5 [r9,-3]\n  eq r2 r2 r5\n  assert r2\n  mstore [r3] r1\n  mload r1 [r9,-5]\n  mstore [r4] r1\n  add r9 r9 -5\n  ret\nu32_power:\n.LBL27_0:\n  mov r0 1\n  mov r3 0\n  jmp .LBL27_1\n.LBL27_1:\n  add r5 r3 1\n  mul r4 r0 r1\n  gte r3 r2 r5\n  cjmp r3 .LBL27_1\n  mov r0 r4\n  mov r3 r5\n  jmp .LBL27_2\n.LBL27_2:\n  range r0\n  ret\ntest:\n.LBL28_0:\n  add r9 r9 30\n  mstore [r9,-2] r9\n  mov r1 10\n  call heap_malloc\n  mov r1 r0\n  mov r5 3\n  mstore [r1] r5\n  mov r5 4\n  mstore [r1,+10] r5\n  mov r5 5\n  mstore [r1,+20] r5\n  mov r5 1\n  mstore [r1,+30] r5\n  mov r5 7\n  mstore [r1,+40] r5\n  mov r5 9\n  mstore [r1,+50] r5\n  mov r5 0\n  mstore [r1,+60] r5\n  mov r5 2\n  mstore [r1,+70] r5\n  mov r5 8\n  mstore [r1,+80] r5\n  mov r5 6\n  mstore [r1,+90] r5\n  call array_sort_test\n  mov r5 r0\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-8] r6\n  not r7 0\n  add r7 r7 1\n  mload r6 [r9,-8]\n  add r6 r6 r7\n  mstore [r9,-12] r6\n  mload r6 [r9,-12]\n  range r6\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-7] r6\n  not r7 0\n  add r7 r7 1\n  mload r6 [r9,-7]\n  add r6 r6 r7\n  mstore [r9,-11] r6\n  mload r6 [r9,-11]\n  range r6\n  add r6 r5 1\n  mload r6 [r6]\n  add r6 r6 1\n  mstore [r9,-10] r6\n  mload r6 [r9,-10]\n  range r6\n  add r6 r5 1\n  mload r7 [r9,-10]\n  mstore [r6] r7\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-16] r6\n  not r7 1\n  add r7 r7 1\n  mload r6 [r9,-16]\n  add r6 r6 r7\n  mstore [r9,-6] r6\n  mload r6 [r9,-6]\n  range r6\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-15] r6\n  not r7 1\n  add r7 r7 1\n  mload r6 [r9,-15]\n  add r6 r6 r7\n  mstore [r9,-5] r6\n  mload r6 [r9,-5]\n  range r6\n  add r6 r5 1\n  mload r6 [r6,+1]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-4] r6\n  mload r6 [r9,-4]\n  range r6\n  add r6 r5 1\n  mload r7 [r9,-4]\n  mstore [r6,+1] r7\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-9] r6\n  not r7 0\n  add r7 r7 1\n  mload r6 [r9,-9]\n  add r6 r6 r7\n  mstore [r9,-14] r6\n  mload r6 [r9,-14]\n  range r6\n  add r6 r5 1\n  mload r6 [r6]\n  eq r6 r6 1\n  assert r6\n  mload r6 [r5]\n  not r7 1\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-13] r6\n  not r7 1\n  add r7 r7 1\n  mload r6 [r9,-13]\n  add r6 r6 r7\n  mstore [r9,-3] r6\n  mload r6 [r9,-3]\n  range r6\n  add r5 r5 1\n  mload r5 [r5,+1]\n  eq r5 r5 1\n  assert r5\n  add r9 r9 -30\n  ret\narray_sort_test:\n.LBL29_0:\n  add r9 r9 11\n  mstore [r9,-2] r9\n  mov r5 r1\n  mstore [r9,-5] r5\n  mload r5 [r9,-5]\n  mstore [r9,-6] r5\n  mov r1 10\n  call vector_new\n  mov r1 r0\n  add r5 r1 1\n  mov r6 0\n  mstore [r9,-4] r6\n  jmp .LBL29_1\n.LBL29_1:\n  mload r6 [r9,-4]\n  mov r7 10\n  gte r7 r7 r6\n  neq r8 r6 10\n  mstore [r9,-7] r8\n  mload r8 [r9,-7]\n  and r7 r7 r8\n  cjmp r7 .LBL29_2\n  jmp .LBL29_3\n.LBL29_2:\n  mov r8 0\n  mstore [r9,-8] r8\n  mload r8 [r9,-8]\n  mstore [r5,r6] r8\n  add r7 r6 1\n  mstore [r9,-4] r7\n  jmp .LBL29_1\n.LBL29_3:\n  mov r5 0\n  mstore [r9,-3] r5\n  jmp .LBL29_4\n.LBL29_4:\n  mload r5 [r9,-3]\n  mov r6 10\n  gte r6 r6 r5\n  neq r5 r5 10\n  and r6 r6 r5\n  cjmp r6 .LBL29_5\n  jmp .LBL29_7\n.LBL29_5:\n  mload r7 [r9,-3]\n  mstore [r9,-10] r7\n  mload r7 [r1]\n  mstore [r9,-11] r7\n  not r7 1\n  add r7 r7 1\n  mload r7 [r9,-11]\n  add r5 r7 r7\n  mload r7 [r9,-10]\n  not r7 r7\n  add r7 r7 1\n  add r6 r5 r7\n  range r6\n  mload r5 [r9,-3]\n  mov r6 9\n  not r7 r5\n  add r7 r7 1\n  add r6 r6 r7\n  mstore [r9,-9] r6\n  mload r6 [r9,-9]\n  range r6\n  mload r6 [r9,-6]\n  mload r5 [r6,r5]\n  add r6 r1 1\n  mload r7 [r9,-10]\n  mstore [r6,r7] r5\n  jmp .LBL29_6\n.LBL29_6:\n  mload r6 [r9,-3]\n  add r5 r6 1\n  range r5\n  mstore [r9,-3] r5\n  jmp .LBL29_4\n.LBL29_7:\n  mload r2 [r1]\n.PROPHET29_0:\n  mov r0 psp\n  mload r0 [r0]\n  add r9 r9 -11\n  ret\nfunction_dispatch:\n.LBL30_0:\n  add r9 r9 16\n  mstore [r9,-2] r9\n  mov r2 r3\n  eq r8 r1 4171824493\n  cjmp r8 .LBL30_2\n  eq r8 r1 4194608243\n  cjmp r8 .LBL30_3\n  jmp .LBL30_1\n.LBL30_1:\n  ret\n.LBL30_2:\n  call test\n  mov r1 1\n  call heap_malloc\n  mov r1 r0\n  mov r2 0\n  mstore [r1] r2\n  tstore r1 1\n  add r9 r9 -16\n  ret\n.LBL30_3:\n  add r1 r2 0\n  call array_sort_test\n  mov r1 r0\n  mstore [r9,-11] r1\n  mload r1 [r9,-11]\n  mload r1 [r1]\n  mul r1 r1 1\n  mstore [r9,-7] r1\n  mload r1 [r9,-7]\n  add r1 r1 1\n  mstore [r9,-5] r1\n  mload r1 [r9,-5]\n  add r1 r1 1\n  mstore [r9,-4] r1\n  mload r1 [r9,-4]\n  call heap_malloc\n  mov r1 r0\n  mstore [r9,-16] r1\n  mload r1 [r9,-11]\n  mload r1 [r1]\n  mul r1 r1 1\n  mstore [r9,-3] r1\n  mload r1 [r9,-3]\n  add r1 r1 1\n  mstore [r9,-6] r1\n  mload r3 [r9,-6]\n  mload r2 [r9,-16]\n  mload r1 [r9,-11]\n  call memcpy\n  mload r1 [r9,-5]\n  mload r2 [r9,-6]\n  mload r3 [r9,-16]\n  mstore [r3,r2] r1\n  mload r1 [r9,-4]\n  mload r2 [r9,-16]\n  tstore r2 r1\n  add r9 r9 -16\n  ret\nmain:\n.LBL31_0:\n  add r9 r9 8\n  mstore [r9,-2] r9\n  mov r1 13\n  call heap_malloc\n  mov r5 r0\n  mov r6 1\n  tload r5 r6 13\n  mload r5 [r5]\n  mstore [r9,-4] r5\n  mov r1 14\n  call heap_malloc\n  mov r5 r0\n  mov r6 1\n  tload r5 r6 14\n  mload r5 [r5]\n  mstore [r9,-6] r5\n  mload r5 [r9,-6]\n  add r5 r5 14\n  mstore [r9,-3] r5\n  mload r1 [r9,-3]\n  call heap_malloc\n  mov r3 r0\n  mov r5 1\n  mload r6 [r9,-3]\n  tload r3 r5 r6\n  mload r2 [r9,-6]\n  mload r1 [r9,-4]\n  call function_dispatch\n  add r9 r9 -8\n  end\n",
  "prophets": [
    {
      "label": ".PROPHET19_0",
      "code": "%{\n    function split_hi(felt in) -> felt {\n        return in / 4294967296;\n    }\n    entry() {\n        cid.out = split_hi(cid.in);\n    }\n%}",
      "inputs": [
        {
          "name": "cid.in",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ],
      "outputs": [
        {
          "name": "cid.out",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ]
    },
    {
      "label": ".PROPHET19_1",
      "code": "%{\n    function split_lo(felt in) -> felt {\n        return in % 4294967296;\n    }\n    entry() {\n        cid.out = split_lo(cid.in);\n    }\n%}",
      "inputs": [
        {
          "name": "cid.in",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ],
      "outputs": [
        {
          "name": "cid.out",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ]
    },
    {
      "label": ".PROPHET26_0",
      "code": "%{\n    function mod(felt x, felt y) -> felt {\n        return x % y;\n    }\n    entry() {\n        cid.r = mod(cid.x, cid.y);\n    }\n%}",
      "inputs": [
        {
          "name": "cid.x",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        },
        {
          "name": "cid.y",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ],
      "outputs": [
        {
          "name": "cid.r",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ]
    },
    {
      "label": ".PROPHET26_1",
      "code": "%{\n    function div(felt x, felt y) -> felt {\n        return x / y;\n    }\n    entry() {\n        cid.q = div(cid.x, cid.y);\n    }\n%}",
      "inputs": [
        {
          "name": "cid.x",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        },
        {
          "name": "cid.y",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ],
      "outputs": [
        {
          "name": "cid.q",
          "length": 1,
          "is_ref": false,
          "is_input_output": false
        }
      ]
    },
    {
      "label": ".PROPHET29_0",
      "code": "%{\n    entry() {\n        cid.arrOut = sort(cid.arrIn, cid.len);\n    }\n    function sort(felt[] arr, felt len) -> felt[] {\n        felt n = len;\n        for (felt i = 0; i < n - 1; i++) {\n            for (felt j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    felt temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n        return arr;\n    }\n%}",
      "inputs": [
        {
          "name": "cid.arrIn",
          "length": 1,
          "is_ref": true,
          "is_input_output": false
        },
        {
          "name": "cid.len",
          "length": 1,
          "is_ref": true,
          "is_input_output": false
        }
      ],
      "outputs": [
        {
          "name": "cid.arrOut",
          "length": 1,
          "is_ref": true,
          "is_input_output": false
        }
      ]
    }
  ]
}
